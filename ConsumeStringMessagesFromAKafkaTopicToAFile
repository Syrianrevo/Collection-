package com.githu.syrianrevo.kafka.tutorial1;

import com.sun.corba.se.impl.orbutil.ObjectWriter;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.time.Duration;
import java.util.Arrays;
import java.util.Properties;

public class ConsumerMessagesWriteOnFile {

    public final static String fileName = "C:\\kafka-beginnerscourse\\Kafka Basics\\src\\main\\resources\\writtenMessages.txt";

    public static int messagesConsumedCount = 0;
    public static int messagesWrittenCount = 0;

    public static void main(String[] args) throws IOException {
        Logger logger = LoggerFactory.getLogger(ConsumerDemo.class.getName());

        String bootstrapServers = "127.0.0.1:9092";
        String groupId = "my_application";
        String topic = "demo18";

        // Create Consumer properties
        Properties properties = new Properties();
        properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, groupId);
        properties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");

        // Create consumer
        KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(properties);

        // Subscribe consumer to our topic
        consumer.subscribe(Arrays.asList(topic));

        // Poll the new data


        FileOutputStream outputStream = new FileOutputStream(fileName);
        while (true) {
            ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));

            for (ConsumerRecord<String, String> record : records) {
                messagesConsumedCount++;
                String str = "  " + record.value() + "  ";
                byte[] strToBytes = str.getBytes();
                outputStream.write(strToBytes);
                messagesWrittenCount++;

                if(messagesConsumedCount != messagesWrittenCount){
                    System.out.println("Messages consumed are not equal to the messages written on file");
                }

                System.out.println(record.value() + "  " + messagesConsumedCount + "  " + messagesWrittenCount);
            }
        }
    }




}
