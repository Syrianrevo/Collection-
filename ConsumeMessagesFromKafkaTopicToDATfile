//This is the Menu Items model:

import java.io.Serializable;

public class MenuItems implements Serializable {



	private String itemName;

	private String itemDescription;

  private String itemPrice; 

  private String itemQuantity;

  private String itemCategory;
	
	
	//Getters and Setters 
	
	public String getItemName() {
		return itemName;
	}

	public void setItemName(String itemName) {
		this.itemName = itemName;
	}

	public String getItemDescription() {
		return itemDescription;
	}

	public void setItemDescription(String itemDescription) {
		this.itemDescription = itemDescription;
	}

	public String getItemPrice() {
		return itemPrice;
	}

	public void setItemPrice(String itemPrice) {
		this.itemPrice = itemPrice;
	}

	public String getItemQuantity() {
		return itemQuantity;
	}

	public void setItemQuantity(String itemQuantity) {
		this.itemQuantity = itemQuantity;
	}

	public String getItemCategory() {
		return itemCategory;
	}

	public void setItemCategory(String itemCategory) {
		this.itemCategory = itemCategory;
	}
	
}

//This is the Kafka consumer that reads from the Menu topic 

public class KafkaConsumerFromTopic{
	
	//Path to the file
	public final static String filepath = "C:\\Users\\ammar\\Documents\\workspace-spring-tool-suite-4-4.2.0.RELEASE\\newworkspace\\foodResApp-1\\src\\main\\resources\\outputMenu.dat";
    
	public void receive(Object obj) {
		  
		
		MenuItems menuItems = new MenuItems(getJson(obj));
		WriteObjectToFile(menuItems); 
		
		
	  }
	
	//Write to the file 
	public void WriteObjectToFile(Object serObj) {
		 
	        try {
	 
	            FileOutputStream fileOut = new FileOutputStream(filepath);
	            ObjectOutputStream objectOut = new ObjectOutputStream(fileOut);
	            objectOut.writeObject(serObj);
	            objectOut.close();
	            System.out.println("The Object  was succesfully written to a file");
	 
	        } catch (Exception ex) {
	            ex.printStackTrace();
	        }
	    }

	  
	//Get the json object 
	public static JsonObject getJson(Object obj) {

		Gson gson = new Gson();

		String json = gson.toJson(obj);

		JsonElement jElement = new JsonParser().parse(json);

		JsonObject jobject = jElement.getAsJsonObject();

		return jobject.getAsJsonObject("value");

	}
	
	
//KafkaConsumerConfig 

package com.syrianrevo.foodApp.kafkaConfig;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.listener.*;
//import org.springframework.kafka.listener.MessageListenerContainer;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.kafka.config.AbstractKafkaListenerContainerFactory;
import com.syrianrevo.foodApp.kafkaProducerAndConsumer.KafkaConsumerFromTopic;
import com.syrianrevo.foodApp.model.Entry;
import com.syrianrevo.foodApp.model.MenuItems;

@Configuration
@EnableKafka
public class KafkaConsumerConfig {


	public Map<String, Object> consumerConfig() {
		Map<String, Object> properties = new HashMap<>();
		properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, Constants.KAFKA_SERVER);
		properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
		properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class.getName());
		properties.put(ConsumerConfig.GROUP_ID_CONFIG, Constants.GROUP_ID);
		properties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
		return properties;
	}

	@Bean
	public ConsumerFactory<String, MenuItems> consumerFactory() {
		return new DefaultKafkaConsumerFactory<>(consumerConfig(), new StringDeserializer(),
				new JsonDeserializer<>(MenuItems.class));
	}

	

	@Bean
	public ConcurrentKafkaListenerContainerFactory<String, MenuItems> kafkaListenerContainerFactory() {
		ConcurrentKafkaListenerContainerFactory<String, MenuItems> factory = new ConcurrentKafkaListenerContainerFactory<>();
		factory.setConsumerFactory(consumerFactory());	

		return factory;
	}

	@Bean
	public KafkaConsumerFromTopic receiver() {
		
		return new KafkaConsumerFromTopic();
	}
	
	@Bean
	public KafkaConsumerFromTopic orderReceiver() {
		
		return new KafkaConsumerFromTopic();
	}
	
	

}
	
